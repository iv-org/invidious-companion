name: Build and Push Docker Image

# Define when this workflow will run
on:
  push:
    branches:
      - master  # Trigger on pushes to master branch
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Trigger on semantic version tags
    paths-ignore:
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
      - 'docker-compose.yml'
  workflow_dispatch:  # Allow manual triggering of the workflow

# Define environment variables used throughout the workflow
env:
  REGISTRY: quay.io
  IMAGE_NAME: invidious/invidious-companion

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up Docker Buildx for enhanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Authenticate with Quay.io registry
      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      # Step 5: Extract metadata for Docker image tagging and labeling
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Define tagging strategy
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=sha,prefix={{branch}}-
          # Define labels
          labels: |
            quay.expires-after=12w

      # Step 6: Build and push the Docker image
      - name: Build and push Docker image
        id: 'build-push'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64  # Build for multiple architectures
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # Step 7: Create binary archives
      - name: Extract `/app` from the Docker image
        shell: bash
        run: |
          set -eu
          mkdir -v -p .artifacts '.tmp/${{ env.IMAGE_NAME }}'
          imageName='${{ fromJSON(steps.build-push.outputs.metadata)["image.name"] }}'
          docker image pull "${imageName}"'@${{ steps.build-push.outputs.digest }}'
          docker container rm -f -v tmp-container || :
          docker container create --name tmp-container \
            "${imageName}"'@${{ steps.build-push.outputs.digest }}'
          docker container cp -a tmp-container:/app - | \
            xz -8 --compress --stdout --threads=2 >| '.tmp/${{ env.IMAGE_NAME }}-amd64.tar.xz'
          docker container rm tmp-container
          docker image remove "${imageName}"'@${{ steps.build-push.outputs.digest }}' 
          docker image pull --platform linux/arm64 \
            "${imageName}"'@${{ steps.build-push.outputs.digest }}'
          docker container create --platform linux/arm64 --name tmp-container \
            "${imageName}"'@${{ steps.build-push.outputs.digest }}'
          docker container cp -a tmp-container:/app - | \
            xz -8 --compress --stdout --threads=2 >| '.tmp/${{ env.IMAGE_NAME }}-arm64.tar.xz'
          docker container rm tmp-container
          docker image remove --platform linux/arm64 \
            "${imageName}"'@${{ steps.build-push.outputs.digest }}'
          find .tmp -name '*.tar.xz' -exec mv -v -t .artifacts/ '{}' +
          rm -rf .tmp
      # Step 8: Upload linux/amd64 archive
      - name: Upload `/app` directory archive from `linux/amd64`
        uses: actions/upload-artifact@v4
        with:
          name: docker-app-linux-amd64
          compression-level: 0
          overwrite: true
          path: .artifacts/*-amd64.tar.xz
      # Step 9: Upload linux/arm64 archive
      - name: Upload `/app` directory archive from `linux/arm64`
        uses: actions/upload-artifact@v4
        with:
          name: docker-app-linux-arm64
          compression-level: 0
          overwrite: true
          path: .artifacts/*-arm64.tar.xz
        
